name: Build and Deploy Back
description: Build and deploy express app to Cloud Run.

runs:
  using: composite
  steps:
    - name: üî® Get Variables
      id: variables
      shell: bash
      run: echo "::set-output name=image::gcr.io/$PROJECT_ID/$SERVICE_NAME"

    - id: auth
      name: üóùÔ∏è Authenticate to Google Cloud
      uses: google-github-actions/auth@v0.4.4
      with:
        create_credentials_file: true
        token_format: access_token
        workload_identity_provider: ${{ env.IDENTITY_PROVIDER }}
        service_account: ${{ env.SERVICE_ACCOUNT_EMAIL }}

    - name: üê≥ Setup docker
      uses: docker/login-action@v1
      with:
        registry: gcr.io
        username: oauth2accesstoken
        password: ${{ steps.auth.outputs.access_token }}

    - name: üì¶ Build image
      shell: bash
      working-directory: src
      run: |-
        docker build \
          -t "${{ steps.variables.outputs.image }}:$GITHUB_SHA" \
          -t "${{ steps.variables.outputs.image }}:latest" \
          -f ./back/Dockerfile \
          .

    - name: üì§ Publish image
      shell: bash
      working-directory: src
      run: |-
        docker push "${{ steps.variables.outputs.image }}" -a

    - name: üöÄ Deploy to Cloud Run
      uses: google-github-actions/deploy-cloudrun@v0.7.0
      working-directory: src
      with:
        service: ${{ env.SERVICE_NAME }}
        image: ${{ steps.variables.outputs.image }}:latest
        region: "us-central1"
        env_vars: |
          ADMIN_EMAIL=${{ env.ADMIN_EMAIL }}
          API=${{ env.API }}
          DATABASE_HOST=${{ env.DATABASE_HOST }}
          DATABASE_PASSWORD=${{ env.DATABASE_PASSWORD }}
          ENVIRONMENT=${{ env.ENVIRONMENT }}
          SENDGRID_API_KEY=${{ env.SENDGRID_API_KEY }}
          PROJECT_ID=${{ env.PROJECT_ID }}
